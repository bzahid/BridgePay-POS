// Generated by Apple Swift version 4.1 (swiftlang-902.0.48 clang-902.0.37.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import CoreData;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Mobelisk",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Model class for Acceleration data
SWIFT_CLASS("_TtC8Mobelisk12Acceleration")
@interface Acceleration : NSObject
/// x position of device
@property (nonatomic, readonly) float xPosition;
/// y position of device
@property (nonatomic, readonly) float yPosition;
/// z position of device
@property (nonatomic, readonly) float zPosition;
/// timestamp at which data captured
@property (nonatomic, readonly, copy) NSDate * _Nonnull timeStamp;
/// total acceleration data
@property (nonatomic, readonly) float totalAcceleration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



@class NSError;

/// Accelerometer report.
/// The Accelerometer report provides an interface to get acceleration details. Registering for notification will give updated Acceleration data at defined time.
SWIFT_CLASS("_TtC8Mobelisk19AccelerometerReport")
@interface AccelerometerReport : NSObject
/// Default initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Returns the current accelerometer details.
/// \param completionHandler <em>@escaping</em> completionHandler which will return - the Acceleration data.
///
- (void)getAccelerometerDetailsWithCompletionHandler:(void (^ _Nonnull)(Acceleration * _Nullable, NSError * _Nullable))completionHandler;
/// Interface definition for a callback to be invoked when a Acceleration data is received.
/// \param identifier Identifier which will be used while de-registering for notification.
///
/// \param duration Time interval at which acceleration data needed
///
/// \param completionHandler <em>@escaping</em> completionHandler which will return - the acceleration data.
///
+ (void)registerForNotificationWithIdentifier:(NSString * _Nonnull)identifier atTimeInterval:(NSTimeInterval)duration completionHandler:(void (^ _Nonnull)(Acceleration * _Nonnull))completionHandler;
/// Interface definition to de-register for acceleration notifications.
+ (void)deRegisterForNotificationWithIdentifier:(NSString * _Nonnull)identifier;
@end

/// Action Button number enum.
/// The ButtonNumber enum is used to identify buttons when receiving key press events from the Enterprise Appliance Basecase.
/// Action Buttons are numbered starting from 0.
/// In most cases the ACTION LED number ‘ActionLedNumber’ will correspond to the ‘ActionButtonNumber’ ACTION BUTTON number.
typedef SWIFT_ENUM(NSInteger, ActionButtonNumber) {
/// Action Button 0.
  ActionButtonNumberButton0 = 0,
/// Action Button 1.
  ActionButtonNumberButton1 = 1,
/// Action Button Unknown.
  ActionButtonNumberUnknown = 2,
};


/// Action Button press report.
/// This report is sent on key up and key down to indicate that a state of a physical button on the Enterprise Appliance changed.
SWIFT_CLASS("_TtC8Mobelisk23ActionButtonStateReport")
@interface ActionButtonStateReport : NSObject
/// Action Button number pressed.
@property (nonatomic) enum ActionButtonNumber buttonNumber;
/// Action Button press state.
@property (nonatomic) BOOL isButtonDown;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Action LED number enum.
/// The LedNumber enum is used to address LEDs when sending commands to turn on or off LEDs on the Enterprise Appliance Basecase.
/// LEDs are numbered starting from 0.
/// In most cases the LED number ‘ActionLedNumber’ will correspond to the ‘ButtonNumber’ button number.
typedef SWIFT_ENUM(NSInteger, ActionLedNumber) {
/// Action LED 0
  ActionLedNumberLED_0 = 0,
/// Action LED 1
  ActionLedNumberLED_1 = 1,
};


/// Model class for Barcode data
SWIFT_CLASS("_TtC8Mobelisk7Barcode")
@interface Barcode : NSObject
/// barcode
@property (nonatomic, readonly, copy) NSString * _Nonnull barcode;
/// timeStamp
@property (nonatomic, readonly, copy) NSDate * _Nonnull timeStamp;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum PowerCondition : uint8_t;
enum ScanMode : NSInteger;

/// BarcodeScan report.
/// The BarcodeScan report provides an interface to get barcode details.
SWIFT_CLASS("_TtC8Mobelisk17BarcodeScanReport")
@interface BarcodeScanReport : NSObject
/// Default initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Turn on/off Barcode scanner.
/// \param completionHandler <em>@escaping</em> completionHandler which will return error if occurred else nil.
///
- (void)setBarcodeScannerStatus:(enum PowerCondition)status completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// Return Barcode scanner status - on/off.
/// \param completionHandler <em>@escaping</em> completionHandler which will return - state.
///
- (void)getBarcodeScannerStatusWithCompletionHandler:(void (^ _Nonnull)(enum PowerCondition, NSError * _Nullable))completionHandler;
/// Starts scanning for barcode.
/// <em>-registerForBarcodeScanNotification(completionHandler:)</em> should be called in order to receive Barcode data.
/// \param completionHandler <em>@escaping</em> completionHandler which will return error if occurred else nil.
///
- (void)startScanWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// Set scan mode as Serial or HID.
/// \param scanMode Provide scan mode Serial or HID. Default is HID.
///
+ (void)setScanMode:(enum ScanMode)scanMode;
/// Stops scanning for barcode.
/// <em>-registerForBarcodeScanNotification(completionHandler:)</em> should be called in order to receive Barcode data.
/// \param completionHandler <em>@escaping</em> completionHandler which will return error if occurred else nil.
///
- (void)stopScanWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// Interface definition for a callback to be invoked when a Barcode data is received.
/// \param completionHandler <em>@escaping</em> completionHandler which will return - the barcode data.
///
+ (void)registerForBarcodeScanNotificationWithIdentifier:(NSString * _Nonnull)identifier completionHandler:(void (^ _Nonnull)(Barcode * _Nonnull))completionHandler;
/// Interface definition to de-register for barcode notifications.
+ (void)deRegisterForNotificationWithIdentifier:(NSString * _Nonnull)identifier;
@end



enum ChargerStatus : uint8_t;
enum CaseChargingStatus : uint8_t;
enum DeviceChargingStatus : uint8_t;

/// Model class for Smartcase battery information
SWIFT_CLASS("_TtC8Mobelisk11BatteryInfo")
@interface BatteryInfo : NSObject
/// percentage
@property (nonatomic, readonly) NSInteger percentage;
/// fraction
@property (nonatomic, readonly) NSInteger fraction;
/// chargerStatus
@property (nonatomic, readonly) enum ChargerStatus chargerStatus;
/// caseChargingStatus
@property (nonatomic, readonly) enum CaseChargingStatus caseChargingStatus;
/// deviceChargingStatus
@property (nonatomic, readonly) enum DeviceChargingStatus deviceChargingStatus;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, BoardType) {
/// Smartcase board type unknown
  BoardTypeUnknown = 0,
/// Smartcase board type X1
  BoardTypeX1 = 1,
/// Smartcase board type X3
  BoardTypeX3 = 2,
/// Smartcase board type X4
  BoardTypeX4 = 3,
};

/// Button number enum.
/// The ButtonNumber enum is used to identify buttons when receiving key press events from the Enterprise Appliance Endcap.
/// Buttons are numbered starting from 0.
/// In most cases the LED number ‘LedNumber’ will correspond to the ‘ButtonNumber’ button number.
typedef SWIFT_ENUM(NSInteger, ButtonNumber) {
/// Enterprise Appliance Button 0.
  ButtonNumberButton0 = 0,
/// Enterprise Appliance Button 1.
  ButtonNumberButton1 = 1,
/// Enterprise Appliance Button Unknown.
  ButtonNumberUnknown = 2,
};


/// Button press report.
/// This report is sent on key up and key down to indicate that a state of a physical button on the Enterprise Appliance changed.
SWIFT_CLASS("_TtC8Mobelisk17ButtonStateReport")
@interface ButtonStateReport : NSObject
/// Button number pressed.
@property (nonatomic, readonly) enum ButtonNumber buttonNumber;
/// Button press state.
@property (nonatomic, readonly) BOOL isButtonDown;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Enum for Smartcase’s Charging Status
typedef SWIFT_ENUM(uint8_t, CaseChargingStatus) {
/// notCharging
  CaseChargingStatusNotCharging = 0,
/// charging
  CaseChargingStatusCharging = 1,
/// chargingError
  CaseChargingStatusChargingError = 2,
};

/// Enum for Smartcase Charger Status
typedef SWIFT_ENUM(uint8_t, ChargerStatus) {
/// notCharging
  ChargerStatusNotCharging = 0,
/// chargingFromACPlug
  ChargerStatusChargingFromACPlug = 1,
/// chargingFromUSB
  ChargerStatusChargingFromUSB = 2,
/// qiCharging
  ChargerStatusQiCharging = 4,
};

/// Enum for Device’s Charging status
typedef SWIFT_ENUM(uint8_t, DeviceChargingStatus) {
/// notCharging
  DeviceChargingStatusNotCharging = 0,
/// charging
  DeviceChargingStatusCharging = 1,
};


/// EAConfigInfo object gives the configuration data, and includes USB VID/PID, GPIO input/output direction, GPIO port numbers, input polarity, output default levels, and GPIO enabled/disabled status.
SWIFT_CLASS("_TtC8Mobelisk12EAConfigInfo")
@interface EAConfigInfo : NSObject
/// Port Numbers GPIO0 And 1
@property (nonatomic, readonly) NSInteger portNumbersGPIO0And1;
/// Port Numbers GPIO2 And 3
@property (nonatomic, readonly) NSInteger portNumbersGPIO2And3;
/// Port Numbers GPIO4 And 5
@property (nonatomic, readonly) NSInteger portNumbersGPIO4And5;
/// Port Numbers GPIO 6 And 7
@property (nonatomic, readonly) NSInteger portNumbersGPIO6And7;
/// Port Numbers GPIO 8 And 9
@property (nonatomic, readonly) NSInteger portNumbersGPIO8And9;
/// Port Numbers GPIO 10 And 11
@property (nonatomic, readonly) NSInteger portNumbersGPIO10And11;
/// Port Numbers GPIO 12 And 13
@property (nonatomic, readonly) NSInteger portNumbersGPIO12And13;
/// Port Numbers GPIO 14 And 15
@property (nonatomic, readonly) NSInteger portNumbersGPIO14And15;
/// Port Numbers GPIO 16 And 17
@property (nonatomic, readonly) NSInteger portNumbersGPIO16And17;
/// Port Numbers GPIO 18 And 19
@property (nonatomic, readonly) NSInteger portNumbersGPIO18And19;
/// Direction GPIO 0 To 7
@property (nonatomic, readonly) NSInteger directionGPIO0To7;
/// Direction GPIO 8 To 15
@property (nonatomic, readonly) NSInteger directionGPIO8To15;
/// Direction GPIO 16 To 19
@property (nonatomic, readonly) NSInteger directionGPIO16To19;
/// Input Polarity Or Output Default GPIO 0 To7
@property (nonatomic, readonly) NSInteger inputPolarityOrOutputDefaultGPIO0To7;
/// Input Polarity Or Output Default GPIO 8 To 15
@property (nonatomic, readonly) NSInteger inputPolarityOrOutputDefaultGPIO8To15;
/// Input Polarity Or Output Default GPIO 16 To 19
@property (nonatomic, readonly) NSInteger inputPolarityOrOutputDefaultGPIO16To19;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Enum for Sensor’s EndCap number
typedef SWIFT_ENUM(NSInteger, EndCapNumber) {
/// Connected to BaseCase
  EndCapNumberBaseCase = 0,
/// Connected to EndCap One
  EndCapNumberOne = 1,
/// Connected to EndCap Two
  EndCapNumberTwo = 2,
};


/// EndCapStatus provides the status of connected endcaps.
SWIFT_CLASS("_TtC8Mobelisk12EndCapStatus")
@interface EndCapStatus : NSObject
/// Provides the status of end cap A.
@property (nonatomic, readonly) enum PowerCondition endCapAStatus;
/// Provides the status of end cap B.
@property (nonatomic, readonly) enum PowerCondition endCapBStatus;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum LedNumber : NSInteger;
@class GetGPIOStatesInfo;
@class UIColor;
@class Pattern;
@class GetGPIOFlashPatternInfo;
@class GetGPIOPWMInfo;

/// The main EnterpriseApplianceAPI class is a high-level interface used to control all parameters (on/off,
/// color, brightness and flash patterns) of the illuminated buttons as well as request device state reports.
SWIFT_CLASS("_TtC8Mobelisk22EnterpriseApplianceAPI")
@interface EnterpriseApplianceAPI : NSObject
/// Initializer for EnterpriseApplianceAPI
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Get EA Configuration.
/// \param completionHandler call back function which contains EAConfigInfo object and error object for success or failure. EAConfigInfo object gives the configuration data, and includes USB VID/PID, GPIO input/output direction, GPIO port numbers, input polarity, output default levels, and GPIO enabled/disabled status.
///
- (void)getEAConfigWithCompletionHandler:(void (^ _Nonnull)(EAConfigInfo * _Nullable, NSError * _Nullable))completionHandler;
/// Power on LED.
/// \param ledNumber the Led Number.
///
/// \param completionHandler call back function for success or failure.
///
- (void)powerOnLedWithLedNumber:(enum LedNumber)ledNumber completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// Get the state of the GPIOs, including both inputs and outputs.
/// \param completionHandler call back function which contains GetGPIOStatesInfo object and error object for success or failure. GetGPIOStatesInfo object gives the state of the GPIOs, including both inputs and outputs.
///
- (void)getGPIOStatesWithCompletionHandler:(void (^ _Nonnull)(GetGPIOStatesInfo * _Nullable, NSError * _Nullable))completionHandler;
/// Power on LED, set the color of illumination and set the flash pattern.
/// \param ledNumber the Led Number.
///
/// \param color color that you want to apply for Led.
///
/// \param pattern flash pattern to set.
///
/// \param brightness brightness to apply to RGB components. It must be within 0 to 255.
///
/// \param completionHandler call back function for success or failure.
///
- (void)powerOnLedWithLedNumber:(enum LedNumber)ledNumber color:(UIColor * _Nonnull)color brightness:(NSInteger)brightness pattern:(Pattern * _Nonnull)pattern completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// Power on LED, set the color, brightness of illumination and set the flash pattern.
/// \param ledNumber the Led Number.
///
/// \param color color that you want to apply for Led.
///
/// \param pattern flash pattern to set.
///
/// \param completionHandler call back function for success or failure.
///
- (void)powerOnLedWithLedNumber:(enum LedNumber)ledNumber color:(UIColor * _Nonnull)color pattern:(Pattern * _Nonnull)pattern completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// Power off Led.
/// \param ledNumber the Led Number.
///
/// \param completionHandler call back function for success or failure.
///
- (void)powerOffLedWithLedNumber:(enum LedNumber)ledNumber completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
- (void)setPatternForLedNumber:(enum LedNumber)ledNumber pattern:(Pattern * _Nonnull)pattern completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// Get flash pattern for GPIONumber.
/// \param completionHandler call back function which contains GetGPIOFlashPatternInfo object and error object for success or failure. GetGPIOFlashPatternInfo object gives current flash pattern for GPIONumber.
///
- (void)getGPIOFlashPatternForGPIONumber:(NSInteger)number completionHandler:(void (^ _Nonnull)(GetGPIOFlashPatternInfo * _Nullable, NSError * _Nullable))completionHandler;
/// This method is used to set the Led color.
/// \param ledNumber Led Number for which to set the color.
///
/// \param color color that you want to apply for Led.
///
/// \param completionHandler call back function for success or failure.
///
- (void)setColorForLedNumber:(enum LedNumber)ledNumber color:(UIColor * _Nonnull)color completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// This method is used to set the Led color.
/// \param ledNumber Led Number for which to set the color.
///
/// \param color color that you want to apply for Led.
///
/// \param brightness brightness to apply to RGB components. It must be within 0 to 255.
///
/// \param completionHandler call back function for success or failure.
///
- (void)setColorForLedNumber:(enum LedNumber)ledNumber color:(UIColor * _Nonnull)color brightness:(NSInteger)brightness completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// Get current PWM duty cycle of the output GPIOs.
/// \param completionHandler call back function which contains GetGPIOPWMInfo object and error object for
/// success or failure. GetGPIOPWMInfo object gives current PWM duty cycle of the output GPIOs.
///
- (void)getGPIOPWMWithCompletionHandler:(void (^ _Nonnull)(GetGPIOPWMInfo * _Nullable, NSError * _Nullable))completionHandler;
/// Power on Action LED.
/// \param actionLedNumber Action Led Number.
///
/// \param completionHandler call back function for success or failure.
///
- (void)setActionButtonLedOnActionLedNumber:(enum ActionLedNumber)actionLedNumber completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// Power off Action LED.
/// \param actionLedNumber Action Led Number.
///
/// \param completionHandler call back function for success or failure.
///
- (void)setActionButtonLedOffWithActionLedNumber:(enum ActionLedNumber)actionLedNumber completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
@end


@interface EnterpriseApplianceAPI (SWIFT_EXTENSION(Mobelisk))
/// Interface definition for a callback to be invoked when EA buttons pressed.
/// \param identifier Identifier which will be used while de-registering for notification.
///
/// \param completionHandler <em>@escaping</em> completionHandler which will return - the button state report.
///
+ (void)registerForEAButtonNotificationWithIdentifier:(NSString * _Nonnull)identifier completionHandler:(void (^ _Nonnull)(ButtonStateReport * _Nonnull))completionHandler;
/// Interface definition to de-register for EA button notifications.
+ (void)deRegisterForEAButtonNotificationWithIdentifier:(NSString * _Nonnull)identifier;
/// Interface definition for a callback to be invoked when Action buttons pressed.
/// \param identifier Identifier which will be used while de-registering for notification.
///
/// \param completionHandler <em>@escaping</em> completionHandler which will return - the button state report.
///
+ (void)registerForActionButtonNotificationWithIdentifier:(NSString * _Nonnull)identifier completionHandler:(void (^ _Nonnull)(ActionButtonStateReport * _Nonnull))completionHandler;
/// Interface definition to de-register for Action button notifications.
+ (void)deRegisterForActionButtonNotificationWithIdentifier:(NSString * _Nonnull)identifier;
@end


/// Model class for Environment data
SWIFT_CLASS("_TtC8Mobelisk11Environment")
@interface Environment : NSObject
/// Temperature
@property (nonatomic, readonly) float temperature;
/// Humidity
@property (nonatomic, readonly) float humidity;
/// Barometric Pressure
@property (nonatomic, readonly) float barometricPressure;
/// TimeStamp
@property (nonatomic, readonly, copy) NSDate * _Nonnull timeStamp;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Environment report.
/// The environment report provides an interface to get environment details. Registering for notification will give updated Environment data at defined time.
SWIFT_CLASS("_TtC8Mobelisk17EnvironmentReport")
@interface EnvironmentReport : NSObject
/// Default initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Returns the current environment details.
/// \param completionHandler <em>@escaping</em> completionHandler which will return - the Environment data.
///
- (void)getEnvironmentalDetailsWithCompletionHandler:(void (^ _Nonnull)(Environment * _Nullable, NSError * _Nullable))completionHandler;
/// Interface definition for a callback to be invoked when a Environment data is received.
/// \param identifier Identifier which will be used while de-registering for notification.
///
/// \param duration Time interval at which environment data needed
///
/// \param completionHandler <em>@escaping</em> completionHandler which will return - the environment data.
///
+ (void)registerForNotificationWithIdentifier:(NSString * _Nonnull)identifier atTimeInterval:(NSTimeInterval)duration completionHandler:(void (^ _Nonnull)(Environment * _Nonnull))completionHandler;
/// Interface definition to de-register for environment notifications.
+ (void)deRegisterForNotificationWithIdentifier:(NSString * _Nonnull)identifier;
@end

/// Enum for Sensor’s Functional States
typedef SWIFT_ENUM(uint8_t, FunctionalState) {
/// unknown
  FunctionalStateUnknown = 0b00000000,
/// ok
  FunctionalStateOk = 0b01000000,
/// error
  FunctionalStateError = 0b10000000,
};


/// GetGPIOFlashPatternInfo object gives current flash pattern for GPIONumber.
SWIFT_CLASS("_TtC8Mobelisk23GetGPIOFlashPatternInfo")
@interface GetGPIOFlashPatternInfo : NSObject
/// GPIO Number
@property (nonatomic, readonly) NSInteger number;
/// Long Flash On Time
@property (nonatomic, readonly) float longFlashOnTime;
/// Long Flash Off Time
@property (nonatomic, readonly) float longFlashOffTime;
/// Long Flash Repetitions
@property (nonatomic, readonly) NSInteger longFlashRepetitions;
/// Short Flash On Time
@property (nonatomic, readonly) float shortFlashOnTime;
/// Short Flash Off Time
@property (nonatomic, readonly) float shortFlashOffTime;
/// Short Flash Repetitions
@property (nonatomic, readonly) NSInteger shortFlashRepetitions;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// GetGPIOPWMInfo object gives current PWM duty cycle of the output GPIOs.
SWIFT_CLASS("_TtC8Mobelisk14GetGPIOPWMInfo")
@interface GetGPIOPWMInfo : NSObject
/// Duty Cycle GPIO 0
@property (nonatomic, readonly) NSInteger dutyCycleGPIO0;
/// Duty Cycle GPIO 1
@property (nonatomic, readonly) NSInteger dutyCycleGPIO1;
/// DutyCycle GPIO 2
@property (nonatomic, readonly) NSInteger dutyCycleGPIO2;
/// Duty Cycle GPIO 3
@property (nonatomic, readonly) NSInteger dutyCycleGPIO3;
/// Duty Cycle GPIO 4
@property (nonatomic, readonly) NSInteger dutyCycleGPIO4;
/// Duty Cycle GPIO 5
@property (nonatomic, readonly) NSInteger dutyCycleGPIO5;
/// Duty Cycle GPIO 6
@property (nonatomic, readonly) NSInteger dutyCycleGPIO6;
/// Duty Cycle GPIO 7
@property (nonatomic, readonly) NSInteger dutyCycleGPIO7;
/// Duty Cycle GPIO 8
@property (nonatomic, readonly) NSInteger dutyCycleGPIO8;
/// Duty Cycle GPIO 9
@property (nonatomic, readonly) NSInteger dutyCycleGPIO9;
/// Duty Cycle GPIO 10
@property (nonatomic, readonly) NSInteger dutyCycleGPIO10;
/// Duty Cycle GPIO 11
@property (nonatomic, readonly) NSInteger dutyCycleGPIO11;
/// Duty Cycle GPIO 12
@property (nonatomic, readonly) NSInteger dutyCycleGPIO12;
/// Duty Cycle GPIO 13
@property (nonatomic, readonly) NSInteger dutyCycleGPIO13;
/// Duty Cycle GPIO 14
@property (nonatomic, readonly) NSInteger dutyCycleGPIO14;
/// Duty Cycle GPIO 15
@property (nonatomic, readonly) NSInteger dutyCycleGPIO15;
/// Duty Cycle GPIO 16
@property (nonatomic, readonly) NSInteger dutyCycleGPIO16;
/// Duty Cycle GPIO 17
@property (nonatomic, readonly) NSInteger dutyCycleGPIO17;
/// Duty Cycle GPIO 18
@property (nonatomic, readonly) NSInteger dutyCycleGPIO18;
/// Duty Cycle GPIO 19
@property (nonatomic, readonly) NSInteger dutyCycleGPIO19;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// GetGPIOStatesInfo object gives the state of the GPIOs, including both inputs and outputs.
SWIFT_CLASS("_TtC8Mobelisk17GetGPIOStatesInfo")
@interface GetGPIOStatesInfo : NSObject
/// State GPIO 0 To 7
@property (nonatomic, readonly) NSInteger stateGPIO0To7;
/// State GPIO 8 To 15
@property (nonatomic, readonly) NSInteger stateGPIO8To15;
/// State GPIO 16 To 19
@property (nonatomic, readonly) NSInteger stateGPIO16To19;
/// Direction GPIO 0 To7
@property (nonatomic, readonly) NSInteger directionGPIO0To7;
/// Direction GPIO 8 To 15
@property (nonatomic, readonly) NSInteger directionGPIO8To15;
/// Direction GPIO 16 To 19
@property (nonatomic, readonly) NSInteger directionGPIO16To19;
/// Enabled GPIO 0 To 7
@property (nonatomic, readonly) NSInteger enabledGPIO0To7;
/// Enabled GPIO 8 To 15
@property (nonatomic, readonly) NSInteger enabledGPIO8To15;
/// Enabled GPIO 16 To 19
@property (nonatomic, readonly) NSInteger enabledGPIO16To19;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// LED number enum.
/// The LedNumber enum is used to address LEDs when sending commands to illuminate or set color on the Enterprise Appliance Endcap.
/// LEDs are numbered starting from 0.
typedef SWIFT_ENUM(NSInteger, LedNumber) {
/// Enterprise Appliance LED 0
  LedNumberLED_0 = 0,
/// Enterprise Appliance LED 1
  LedNumberLED_1 = 1,
};


/// Card Read response.
/// This is sent when card is waved (for Contactless) or swiped (for MSR) or inserted (for Contact) by user.
SWIFT_CLASS("_TtC8Mobelisk20MPOSCardReadResponse")
@interface MPOSCardReadResponse : NSObject
/// Indicates if Card read is successful or not.
@property (nonatomic) BOOL isCardReadSuccessful;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// MPOS Device Connection enum.
typedef SWIFT_ENUM(NSInteger, MPOSDeviceConnection) {
/// MPOSDevice disconnected.
  MPOSDeviceConnectionDisconnected = 0,
/// MPOSDevice connected.
  MPOSDeviceConnectionConnected = 1,
};


/// MPOS Device Connection response.
/// This is sent when MPOS device is connected/disconnected.
SWIFT_CLASS("_TtC8Mobelisk27MPOSDeviceConnectionDetails")
@interface MPOSDeviceConnectionDetails : NSObject
/// MPOSDevice Connection Status
@property (nonatomic, readonly) enum MPOSDeviceConnection connectionStatus;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




/// MPOS report.
/// The MPOSReport provides an interface to get MPOS details.
SWIFT_CLASS("_TtC8Mobelisk10MPOSReport")
@interface MPOSReport : NSObject
/// Default initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Turn on/off MPOS.
/// \param completionHandler <em>@escaping</em> completionHandler which will return error if occurred else nil.
///
- (void)setMPOSStatus:(enum PowerCondition)status completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// Return MPOS status - on/off.
/// \param completionHandler <em>@escaping</em> completionHandler which will return - state.
///
- (void)getMPOSStatusWithCompletionHandler:(void (^ _Nonnull)(enum PowerCondition, NSError * _Nullable))completionHandler;
@end


SWIFT_CLASS("_TtC8Mobelisk10MPOSRouter")
@interface MPOSRouter : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MPOSRouter * _Nonnull shared;)
+ (MPOSRouter * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)sendDataToEndCapWithData:(NSData * _Nonnull)data completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
@end


/// Configuration class.
/// It provides configuration to the Mobelisk framework about how it should build.
/// It has two properties:
/// <ul>
///   <li>
///     isCoreApp - Is indicate whether framework is build from Core app.
///   </li>
///   <li>
///     appGroupIdentifier - This is app group indentifier generated from developers account.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC8Mobelisk14MobeliskConfig")
@interface MobeliskConfig : NSObject
/// Default intialiser with core app indicator and app group identifier.
- (nonnull instancetype)initWithIsCoreApp:(BOOL)isCoreApp appGroupIdentifier:(NSString * _Nonnull)appGroupIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class MPOSBypassManager;
@class SmartCaseDetails;

/// Mobelisk frameworks manager class.
/// It provides an interface to build the framework with MobeliskConfig model.
/// It also provides an interface for push notification helper methods.
SWIFT_CLASS("_TtC8Mobelisk15MobeliskManager")
@interface MobeliskManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MPOSBypassManager * _Nullable mPOSBypassManager;)
+ (MPOSBypassManager * _Nullable)mPOSBypassManager SWIFT_WARN_UNUSED_RESULT;
+ (void)setMPOSBypassManager:(MPOSBypassManager * _Nullable)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Details of connected smartCase.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SmartCaseDetails * _Nullable connectedCase;)
+ (SmartCaseDetails * _Nullable)connectedCase SWIFT_WARN_UNUSED_RESULT;
/// Build the framework with MobeliskConfig model.
+ (void)buildWithConfiguration:(MobeliskConfig * _Nonnull)config;
@end


@interface MobeliskManager (SWIFT_EXTENSION(Mobelisk))
/// Setup APNS token to receive push notifications intended for Mobelisk framework.
+ (void)setAPNSTokenWithToken:(NSString * _Nonnull)token;
/// Handle received push notification.
+ (void)validatePushNotificationWithUserInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo;
@end














/// Flash Pattern.
/// The flash pattern consists of a number of long flashes and short flashes, which can be set in
/// increments of 100ms, from 0 to 25.5 seconds.
/// The number of long and short flashes can be set from 0 to 128.
/// The LED will illuminate for the on and off durations of the long patterns, for the long pattern
/// repetition number (or skip it if this number is 0). When finished, it will start illuminating for the
/// on and off durations of the short patterns, for the short pattern repetition number (or skip it if this
/// number is 0). It then repeats and begins with the long pattern again.
SWIFT_CLASS("_TtC8Mobelisk7Pattern")
@interface Pattern : NSObject
/// SOLID illumination pattern.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Pattern * _Nonnull SOLID;)
+ (Pattern * _Nonnull)SOLID SWIFT_WARN_UNUSED_RESULT;
/// BLINK_SLOW illumination pattern (blink once per second).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Pattern * _Nonnull BLINK_SLOW;)
+ (Pattern * _Nonnull)BLINK_SLOW SWIFT_WARN_UNUSED_RESULT;
/// BLINK_FAST illumination pattern (blink twice per second).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Pattern * _Nonnull BLINK_FAST;)
+ (Pattern * _Nonnull)BLINK_FAST SWIFT_WARN_UNUSED_RESULT;
/// BLINK_LONG_SHORT illumination pattern (one long, one short).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Pattern * _Nonnull BLINK_LONG_SHORT;)
+ (Pattern * _Nonnull)BLINK_LONG_SHORT SWIFT_WARN_UNUSED_RESULT;
/// Minimum flash time in seconds.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) float MIN_FLASH_TIME;)
+ (float)MIN_FLASH_TIME SWIFT_WARN_UNUSED_RESULT;
/// Maximum flash time in seconds.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) float MAX_FLASH_TIME;)
+ (float)MAX_FLASH_TIME SWIFT_WARN_UNUSED_RESULT;
/// Minimum repetitions.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MIN_REPETITIONS;)
+ (NSInteger)MIN_REPETITIONS SWIFT_WARN_UNUSED_RESULT;
/// Maximum repetitions.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_REPETITIONS;)
+ (NSInteger)MAX_REPETITIONS SWIFT_WARN_UNUSED_RESULT;
/// the long flash on time.
@property (nonatomic) float longFlashOnTime;
/// the long flash off time.
@property (nonatomic) float longFlashOffTime;
/// the long flash repetitions.
@property (nonatomic) NSInteger longFlashRepetitions;
/// the short flash on time.
@property (nonatomic) float shortFlashOnTime;
/// the short flash off time.
@property (nonatomic) float shortFlashOffTime;
/// the short flash repetitions.
@property (nonatomic) NSInteger shortFlashRepetitions;
/// Instantiates a new Pattern.
/// \param longFlashOnTime the long flash on time.
///
/// \param longFlashOffTime the long flash off time.
///
/// \param longFlashRepetitions the long flash repetitions.
///
/// \param shortFlashOnTime the short flash on time.
///
/// \param shortFlashOffTime the short flash off time.
///
/// \param shortFlashRepetitions the short flash repetitions.
///
- (nonnull instancetype)initWithLongFlashOnTime:(float)longFlashOnTime longFlashOffTime:(float)longFlashOffTime longFlashRepetitions:(NSInteger)longFlashRepetitions shortFlashOnTime:(float)shortFlashOnTime shortFlashOffTime:(float)shortFlashOffTime shortFlashRepetitions:(NSInteger)shortFlashRepetitions;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Enum for Sensor’s power condition
typedef SWIFT_ENUM(uint8_t, PowerCondition) {
/// Off
  PowerConditionOff = 0,
/// On
  PowerConditionOn = 1,
/// Do not change
  PowerConditionDoNotChange = 2,
/// Turn off when tablet sleep
  PowerConditionTurnOffWhenTabletSleep = 3,
/// Turn off when tablet sleep and on battery power
  PowerConditionTurnOffWhenTabletSleepAndBatteryPower = 4,
/// Turn off when tablet sleep and connected to AC power
  PowerConditionTurnOffWhenTabletSleepAndACPower = 5,
};


SWIFT_CLASS("_TtC8Mobelisk19SafeDriverDataModel")
@interface SafeDriverDataModel : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull currentSpeed;
@property (nonatomic, readonly, copy) NSString * _Nonnull blackListThreshold;
@property (nonatomic, readonly, copy) NSString * _Nonnull whiteListThreshold;
@property (nonatomic, readonly, copy) NSString * _Nonnull lableRef;
@property (nonatomic, readonly, copy) NSString * _Nonnull speedUnit;
@property (nonatomic, readonly, copy) NSString * _Nonnull blackListTimeThreshold;
@property (nonatomic, readonly, copy) NSString * _Nonnull whiteListTimeThreshold;
@property (nonatomic, readonly, copy) NSString * _Nonnull currentState;
@property (nonatomic, readonly, copy) NSString * _Nonnull whiteListStartTime;
@property (nonatomic, readonly, copy) NSString * _Nonnull blackListStartTime;
@property (nonatomic, readonly, copy) NSString * _Nonnull whiteListTimeRemaining;
@property (nonatomic, readonly, copy) NSString * _Nonnull blackListTimeRemaining;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// ScanMode enum.
typedef SWIFT_ENUM(NSInteger, ScanMode) {
/// ScanMode - HID.
  ScanModeHid = 0,
/// ScanMode - Serial.
  ScanModeSerial = 1,
};

enum SensorStatus : uint8_t;

/// Model class for Sensor
SWIFT_CLASS("_TtC8Mobelisk6Sensor")
@interface Sensor : NSObject
/// id
@property (nonatomic, readonly) NSInteger id;
/// state
@property (nonatomic, readonly) enum FunctionalState state;
/// status
@property (nonatomic, readonly) enum SensorStatus status;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Enum for Sensor’s identifier
typedef SWIFT_ENUM(NSInteger, SensorIdentifier) {
/// Undefined
  SensorIdentifierNone = 0,
/// Magtek MSR
  SensorIdentifierMagtekMSR = 16,
/// Intermec BCS
  SensorIdentifierIntermecBCS = 32,
/// Zebra BCS
  SensorIdentifierZebraBCS = 33,
/// Chimera EA
  SensorIdentifierChimeraEA = 49,
/// MinismartII
  SensorIdentifierMinismartII = 64,
/// IDTech4880
  SensorIdentifierIdTech4880 = 80,
/// RFID Reader
  SensorIdentifierRfidReader = 96,
/// BaseCase sensor accelerometer
  SensorIdentifierAccelerometer = 1,
/// BaseCase sensor temperature
  SensorIdentifierTemperature = 2,
/// BaseCase sensor barometer
  SensorIdentifierBarometer = 3,
/// BaseCase sensor shockEvent
  SensorIdentifierShockEvent = 4,
/// BaseCase sensor motion
  SensorIdentifierMotion = 5,
/// Not exactly sensor: Location/Position
  SensorIdentifierPosition = 6,
/// Not exactly sensor: EA
  SensorIdentifierEnterpriseAppliance = 7,
/// Not exactly sensor: Safe Driver
  SensorIdentifierSafeDriver = 8,
};

/// Enum for Sensor’s Status
typedef SWIFT_ENUM(uint8_t, SensorStatus) {
/// idle
  SensorStatusIdle = 0b00000000,
/// busy
  SensorStatusBusy = 0b00000001,
/// initializing
  SensorStatusInitializing = 0b00000010,
/// off
  SensorStatusOff = 0b00000011,
/// sleep
  SensorStatusSleep = 0b00000100,
/// unknown
  SensorStatusUnknown = 5,
};


/// Model class for Shock data
SWIFT_CLASS("_TtC8Mobelisk9ShockData")
@interface ShockData : NSObject
/// x Value
@property (nonatomic, readonly) float xValue;
/// y Value
@property (nonatomic, readonly) float yValue;
/// z Value
@property (nonatomic, readonly) float zValue;
/// magnitude
@property (nonatomic, readonly) float magnitude;
/// total
@property (nonatomic, readonly) float total;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Model class for Shock event
SWIFT_CLASS("_TtC8Mobelisk10ShockEvent")
@interface ShockEvent : NSObject
/// Event Id
@property (nonatomic, readonly, copy) NSString * _Nonnull eventId;
/// Event Name
@property (nonatomic, readonly, copy) NSString * _Nonnull eventName;
/// samplingRate
@property (nonatomic, readonly) NSInteger samplingRate;
/// fallTime
@property (nonatomic, readonly) float fallTime;
/// Array of ShockData model
@property (nonatomic, readonly, copy) NSArray<ShockData *> * _Nonnull shocks;
/// Timestamp
@property (nonatomic, readonly, copy) NSDate * _Nonnull timeStamp;
/// Free Fall Height
@property (nonatomic, readonly) float freeFallHeight;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Model class for Shock event config
SWIFT_CLASS("_TtC8Mobelisk16ShockEventConfig")
@interface ShockEventConfig : NSObject
/// isEnabled
@property (nonatomic, readonly) BOOL isEnabled;
/// magnitude
@property (nonatomic, readonly) float magnitude;
/// fallTime
@property (nonatomic, readonly) NSInteger fallTime;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Shock event report.
/// The Shock event report provides an interface to get shock alert with specified magnitude and fall time.
SWIFT_CLASS("_TtC8Mobelisk16ShockEventReport")
@interface ShockEventReport : NSObject
/// Default initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Interface definition for a callback to be invoked when a Shock event is received.
/// \param completionHandler <em>@escaping</em> completionHandler which will return - the shock event data.
///
+ (void)registerForNotificationWithIdentifier:(NSString * _Nonnull)identifier completionHandler:(void (^ _Nonnull)(ShockEvent * _Nonnull))completionHandler;
/// Interface definition to de-register for shock alert notifications.
+ (void)deRegisterForNotificationWithIdentifier:(NSString * _Nonnull)identifier;
@end


/// Model class for Smartcase information
SWIFT_CLASS("_TtC8Mobelisk16SmartCaseDetails")
@interface SmartCaseDetails : NSObject
/// batteryStatus
@property (nonatomic, readonly, copy) NSString * _Nonnull batteryStatus;
/// firmwareVersionNumber
@property (nonatomic, readonly, copy) NSString * _Nonnull firmwareVersionNumber;
/// serialNumber
@property (nonatomic, readonly, copy) NSString * _Nonnull serialNumber;
/// isActive
@property (nonatomic, readonly) BOOL isActive;
/// hasIssue
@property (nonatomic, readonly) BOOL hasIssue;
/// id
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// type
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// modelNumber
@property (nonatomic, readonly, copy) NSString * _Nonnull modelNumber;
/// boardType
@property (nonatomic, readonly) enum BoardType boardType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class SmartCaseSensor;

@interface SmartCaseDetails (SWIFT_EXTENSION(Mobelisk))
- (NSArray<SmartCaseSensor *> * _Nonnull)listOfConnectedSensors SWIFT_WARN_UNUSED_RESULT;
@end


/// Smart case report.
/// The smart case report contains all relevant hardware version information needed to identify a case.
SWIFT_CLASS("_TtC8Mobelisk15SmartCaseReport")
@interface SmartCaseReport : NSObject
/// Default initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Returns the list of connected sensors.
/// \param completionHandler <em>@escaping</em> completionHandler which will return - the list of connected sensors - array of Sensor model.
///
- (void)getListOfSensorsWithCompletionHandler:(void (^ _Nonnull)(NSArray<Sensor *> * _Nullable, NSError * _Nullable))completionHandler;
/// Returns the Part number of Endcap #1.
/// \param completionHandler <em>@escaping</em> completionHandler which will return - the part number of Endcap #1.
///
- (void)getEndcapOnePartNumberWithCompletionHandler:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))completionHandler;
/// Returns the Revision of Endcap #1.
/// \param completionHandler <em>@escaping</em> completionHandler which will return - the revision of Endcap #1.
///
- (void)getEndcapOneRevisionWithCompletionHandler:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))completionHandler;
/// Returns the Part number of Endcap #2.
/// \param completionHandler <em>@escaping</em> completionHandler which will return - the part number of Endcap #2.
///
- (void)getEndcapTwoPartNumberWithCompletionHandler:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))completionHandler;
/// Returns the Revision of Endcap #2.
/// \param completionHandler <em>@escaping</em> completionHandler which will return - the revision of Endcap #2.
///
- (void)getEndcapTwoRevisionWithCompletionHandler:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))completionHandler;
/// Interface definition for a callback to be invoked when a Battery status changes.
/// \param completionHandler <em>@escaping</em> completionHandler which will return - the BatteryInfo model.
///
+ (void)registerForBatteryStatusNotificationWithIdentifier:(NSString * _Nonnull)identifier completionHandler:(void (^ _Nonnull)(BatteryInfo * _Nonnull))completionHandler;
/// Interface definition to de-register for battery status notifications.
+ (void)deRegisterForBatteryStatusNotificationWithIdentifier:(NSString * _Nonnull)identifier;
@end


@interface SmartCaseReport (SWIFT_EXTENSION(Mobelisk))
/// Returns the case battery details.
/// \param completionHandler <em>@escaping</em> completionHandler which will return - the BatteryInfo model with expected data.
///
- (void)getSmartCaseBatteryDetailsWithCompletionHandler:(void (^ _Nonnull)(BatteryInfo * _Nullable, NSError * _Nullable))completionHandler;
@end


SWIFT_CLASS("_TtC8Mobelisk15SmartCaseSensor")
@interface SmartCaseSensor : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull firmwareVersion;
@property (nonatomic, readonly) enum SensorIdentifier sensorType;
@property (nonatomic, readonly) enum PowerCondition powerState;
@property (nonatomic, readonly) enum EndCapNumber connectedToEndcapNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end























#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
